[2022-05-04 17:09:58,114] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:09:58,115] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:09:58,115] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:09:58,116] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:09:58,116] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:09:58,117] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:09:58,118] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:09:58,119] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:10:12,742] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@46f5f779, name=log4j:logger=kafka.controller (kafka.controller)
[2022-05-04 17:10:34,818] INFO [ControllerEventThread controllerId=3] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:10:34,846] INFO [Controller id=3] 3 successfully elected as the controller. Epoch incremented to 6 and epoch zk version is now 6 (kafka.controller.KafkaController)
[2022-05-04 17:10:34,848] INFO [Controller id=3] Registering handlers (kafka.controller.KafkaController)
[2022-05-04 17:10:34,853] INFO [Controller id=3] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-04 17:10:34,863] INFO [Controller id=3] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-04 17:10:34,866] INFO [Controller id=3] Initializing controller context (kafka.controller.KafkaController)
[2022-05-04 17:10:34,883] INFO [Controller id=3] Initialized broker epochs cache: HashMap(3 -> 995) (kafka.controller.KafkaController)
[2022-05-04 17:10:34,898] DEBUG [Controller id=3] Register BrokerModifications handler for Set(3) (kafka.controller.KafkaController)
[2022-05-04 17:10:34,927] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:10:34,934] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:10:34,935] INFO [Controller id=3] Currently active brokers in the cluster: Set(3) (kafka.controller.KafkaController)
[2022-05-04 17:10:34,936] INFO [Controller id=3] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-04 17:10:34,936] INFO [Controller id=3] Current list of topics in the cluster: HashSet(__consumer_offsets) (kafka.controller.KafkaController)
[2022-05-04 17:10:34,936] INFO [Controller id=3] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-04 17:10:34,943] INFO [Controller id=3] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-04 17:10:34,943] INFO [Controller id=3] List of topics ineligible for deletion: __consumer_offsets (kafka.controller.KafkaController)
[2022-05-04 17:10:34,943] INFO [Controller id=3] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-04 17:10:34,944] INFO [Topic Deletion Manager 3] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(__consumer_offsets) (kafka.controller.TopicDeletionManager)
[2022-05-04 17:10:34,945] INFO [Controller id=3] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-04 17:10:34,957] INFO [ReplicaStateMachine controllerId=3] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:10:34,963] INFO [ReplicaStateMachine controllerId=3] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:10:34,966] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9095 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:10:34,993] INFO [ReplicaStateMachine controllerId=3] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:10:35,098] DEBUG [ReplicaStateMachine controllerId=3] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=31,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=40,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=3] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=4] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=5] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=4] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:10:35,099] INFO [PartitionStateMachine controllerId=3] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:10:35,102] INFO [PartitionStateMachine controllerId=3] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:10:35,160] DEBUG [PartitionStateMachine controllerId=3] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OfflinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:10:35,161] INFO [Controller id=3] Ready to serve as the new controller with epoch 6 (kafka.controller.KafkaController)
[2022-05-04 17:10:35,167] INFO [Controller id=3] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-04 17:10:35,167] INFO [Controller id=3] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-04 17:10:35,167] INFO [Controller id=3] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-04 17:10:35,167] INFO [Controller id=3] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-04 17:10:35,169] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-04 17:10:35,178] INFO [Controller id=3] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-04 17:10:39,618] INFO [Controller id=3] Newly added brokers: 4, deleted brokers: , bounced brokers: , all live brokers: 3,4 (kafka.controller.KafkaController)
[2022-05-04 17:10:39,619] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 4 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:10:39,621] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:10:39,623] INFO [Controller id=3] New broker startup callback for 4 (kafka.controller.KafkaController)
[2022-05-04 17:10:39,627] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9096 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:10:39,674] DEBUG [Controller id=3] Register BrokerModifications handler for List(4) (kafka.controller.KafkaController)
[2022-05-04 17:10:39,676] INFO [Controller id=3] Updated broker epochs cache: HashMap(3 -> 995, 4 -> 1055) (kafka.controller.KafkaController)
[2022-05-04 17:10:39,682] INFO [ControllerEventThread controllerId=4] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:10:39,700] DEBUG [Controller id=4] Broker 3 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-04 17:10:40,180] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:10:40,181] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:10:40,187] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap(__consumer_offsets-35 -> List(0), __consumer_offsets-47 -> List(0), __consumer_offsets-17 -> List(0), __consumer_offsets-11 -> List(0), __consumer_offsets-5 -> List(0), __consumer_offsets-29 -> List(0), __consumer_offsets-41 -> List(0), __consumer_offsets-23 -> List(0)) (kafka.controller.KafkaController)
[2022-05-04 17:10:40,189] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 1.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:40,190] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2022-05-04 17:10:40,190] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap(__consumer_offsets-30 -> List(5), __consumer_offsets-36 -> List(5), __consumer_offsets-24 -> List(5), __consumer_offsets-48 -> List(5), __consumer_offsets-6 -> List(5), __consumer_offsets-0 -> List(5), __consumer_offsets-12 -> List(5), __consumer_offsets-42 -> List(5), __consumer_offsets-18 -> List(5)) (kafka.controller.KafkaController)
[2022-05-04 17:10:40,190] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 1.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:40,190] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2022-05-04 17:10:40,190] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap(__consumer_offsets-8 -> List(1), __consumer_offsets-38 -> List(1), __consumer_offsets-26 -> List(1), __consumer_offsets-32 -> List(1), __consumer_offsets-2 -> List(1), __consumer_offsets-14 -> List(1), __consumer_offsets-20 -> List(1), __consumer_offsets-44 -> List(1)) (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 1.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap(__consumer_offsets-21 -> List(2), __consumer_offsets-33 -> List(2), __consumer_offsets-3 -> List(2), __consumer_offsets-15 -> List(2), __consumer_offsets-39 -> List(2), __consumer_offsets-45 -> List(2), __consumer_offsets-27 -> List(2), __consumer_offsets-9 -> List(2)) (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:10:40,191] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:10:44,291] INFO [Controller id=3] Newly added brokers: 5, deleted brokers: , bounced brokers: , all live brokers: 3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:10:44,291] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 5 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:10:44,295] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:10:44,295] INFO [Controller id=3] New broker startup callback for 5 (kafka.controller.KafkaController)
[2022-05-04 17:10:44,299] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9097 (id: 5 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:10:44,326] DEBUG [Controller id=3] Register BrokerModifications handler for List(5) (kafka.controller.KafkaController)
[2022-05-04 17:10:44,328] INFO [Controller id=3] Updated broker epochs cache: HashMap(3 -> 995, 4 -> 1055, 5 -> 1080) (kafka.controller.KafkaController)
[2022-05-04 17:10:44,354] INFO [ControllerEventThread controllerId=5] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:10:44,370] DEBUG [Controller id=5] Broker 3 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-04 17:11:19,893] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@46f5f779, name=log4j:logger=kafka.controller (kafka.controller)
[2022-05-04 17:11:26,226] INFO [Controller id=3] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:11:26,226] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:11:26,230] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:11:26,230] INFO [Controller id=3] New broker startup callback for 0 (kafka.controller.KafkaController)
[2022-05-04 17:11:26,234] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:11:26,252] DEBUG [Controller id=3] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2022-05-04 17:11:26,254] INFO [Controller id=3] Updated broker epochs cache: HashMap(0 -> 1105, 3 -> 995, 4 -> 1055, 5 -> 1080) (kafka.controller.KafkaController)
[2022-05-04 17:11:26,279] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:11:26,297] DEBUG [Controller id=0] Broker 3 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-04 17:11:31,219] INFO [Controller id=3] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:11:31,219] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:11:31,223] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:11:31,223] INFO [Controller id=3] New broker startup callback for 1 (kafka.controller.KafkaController)
[2022-05-04 17:11:31,227] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:11:31,247] DEBUG [Controller id=3] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2022-05-04 17:11:31,249] INFO [Controller id=3] Updated broker epochs cache: HashMap(0 -> 1105, 1 -> 1129, 3 -> 995, 4 -> 1055, 5 -> 1080) (kafka.controller.KafkaController)
[2022-05-04 17:11:31,275] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:11:31,289] DEBUG [Controller id=1] Broker 3 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-04 17:11:36,282] INFO [Controller id=3] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:11:36,282] DEBUG [Channel manager on controller 3]: Controller 3 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-05-04 17:11:36,285] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)
[2022-05-04 17:11:36,285] INFO [Controller id=3] New broker startup callback for 2 (kafka.controller.KafkaController)
[2022-05-04 17:11:36,289] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:11:36,303] DEBUG [Controller id=3] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2022-05-04 17:11:36,305] INFO [Controller id=3] Updated broker epochs cache: HashMap(0 -> 1105, 1 -> 1129, 2 -> 1153, 3 -> 995, 4 -> 1055, 5 -> 1080) (kafka.controller.KafkaController)
[2022-05-04 17:11:36,334] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:11:36,349] DEBUG [Controller id=2] Broker 3 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-04 17:11:55,490] INFO [Controller id=3] New topics: [Set(Sensor)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(Sensor,Some(mMvqc1eyQnevZRZcJb4vNw),HashMap(Sensor-0 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), Sensor-5 -> ReplicaAssignment(replicas=1,5,4, addingReplicas=, removingReplicas=), Sensor-2 -> ReplicaAssignment(replicas=0,2,3, addingReplicas=, removingReplicas=), Sensor-3 -> ReplicaAssignment(replicas=5,3,0, addingReplicas=, removingReplicas=), Sensor-1 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), Sensor-4 -> ReplicaAssignment(replicas=4,0,5, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-05-04 17:11:55,491] INFO [Controller id=3] New partition creation callback for Sensor-0,Sensor-5,Sensor-2,Sensor-3,Sensor-1,Sensor-4 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,192] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:15:40,193] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:15:40,195] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,196] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:20:40,196] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:20:40,198] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,198] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,198] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:20:40,199] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,199] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:25:40,200] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:25:40,201] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,201] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,201] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,201] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:25:40,202] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,203] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:30:40,203] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,204] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:30:40,205] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:30:40,205] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,205] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:35:40,205] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:35:40,206] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,207] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-04 17:40:40,207] TRACE [Controller id=3] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 5 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] DEBUG [Controller id=3] Topics not in preferred replica for broker 4 HashMap() (kafka.controller.KafkaController)
[2022-05-04 17:40:40,208] TRACE [Controller id=3] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,121] DEBUG [Controller id=3] Delete topics listener fired for topics Sensor to be deleted (kafka.controller.KafkaController)
[2022-05-04 17:42:31,122] INFO [Controller id=3] Starting topic deletion for topics Sensor (kafka.controller.KafkaController)
[2022-05-04 17:42:31,124] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,125] INFO [Topic Deletion Manager 3] Deletion of topic Sensor (re)started (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9096 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9095 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,134] INFO [RequestSendThread controllerId=3] Controller 3 connected to joao:9097 (id: 5 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-04 17:42:31,234] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 3: request error = NONE, partition errors = HashMap(Sensor-2 -> NONE, Sensor-3 -> NONE, Sensor-1 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,238] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=2,Replica=3],[Topic=Sensor,Partition=3,Replica=3],[Topic=Sensor,Partition=1,Replica=3] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,240] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,241] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = HashMap(Sensor-5 -> NONE, Sensor-0 -> NONE, Sensor-1 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,241] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=5,Replica=1],[Topic=Sensor,Partition=0,Replica=1],[Topic=Sensor,Partition=1,Replica=1] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,241] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,246] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 2: request error = NONE, partition errors = HashMap(Sensor-2 -> NONE, Sensor-0 -> NONE, Sensor-1 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,246] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=2,Replica=2],[Topic=Sensor,Partition=0,Replica=2],[Topic=Sensor,Partition=1,Replica=2] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,246] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,250] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 5: request error = NONE, partition errors = HashMap(Sensor-4 -> NONE, Sensor-5 -> NONE, Sensor-3 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,251] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=4,Replica=5],[Topic=Sensor,Partition=5,Replica=5],[Topic=Sensor,Partition=3,Replica=5] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,251] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,251] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 4: request error = NONE, partition errors = HashMap(Sensor-4 -> NONE, Sensor-5 -> NONE, Sensor-0 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,252] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=4,Replica=4],[Topic=Sensor,Partition=5,Replica=4],[Topic=Sensor,Partition=0,Replica=4] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,252] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,252] DEBUG [Controller id=3] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = HashMap(Sensor-4 -> NONE, Sensor-2 -> NONE, Sensor-3 -> NONE) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,252] DEBUG [Topic Deletion Manager 3] Deletion successfully completed for replicas [Topic=Sensor,Partition=4,Replica=0],[Topic=Sensor,Partition=2,Replica=0],[Topic=Sensor,Partition=3,Replica=0] (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,253] INFO [Topic Deletion Manager 3] Handling deletion for topics Sensor (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,299] INFO [Topic Deletion Manager 3] Deletion of topic Sensor successfully completed (kafka.controller.TopicDeletionManager)
[2022-05-04 17:42:31,300] INFO [Controller id=3] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2022-05-04 17:42:31,301] DEBUG [Controller id=3] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2022-05-04 17:42:31,534] INFO [Controller id=3] Shutting down broker 2 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,534] DEBUG [Controller id=3] All shutting down brokers: 2 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,534] DEBUG [Controller id=3] Live brokers: 0,5,1,3,4 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,537] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,539] INFO [Controller id=3] Shutting down broker 4 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,539] DEBUG [Controller id=3] All shutting down brokers: 2,4 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,539] DEBUG [Controller id=3] Live brokers: 0,1,3,5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,539] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,540] INFO [Controller id=3] Shutting down broker 3 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,540] DEBUG [Controller id=3] All shutting down brokers: 2,3,4 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,540] DEBUG [Controller id=3] Live brokers: 0,1,5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,541] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,541] INFO [Controller id=3] Shutting down broker 5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,541] DEBUG [Controller id=3] All shutting down brokers: 2,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,541] DEBUG [Controller id=3] Live brokers: 0,1 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,542] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,542] INFO [Controller id=3] Shutting down broker 1 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,542] DEBUG [Controller id=3] All shutting down brokers: 1,2,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,542] DEBUG [Controller id=3] Live brokers: 0 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,543] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:31,543] INFO [Controller id=3] Shutting down broker 0 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,543] DEBUG [Controller id=3] All shutting down brokers: 0,1,2,3,4,5 (kafka.controller.KafkaController)
[2022-05-04 17:42:31,543] DEBUG [Controller id=3] Live brokers:  (kafka.controller.KafkaController)
[2022-05-04 17:42:31,544] TRACE [Controller id=3] All leaders = __consumer_offsets-13 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-46 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-42 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-30 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-1 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-34 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-12 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-24 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-49 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-0 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-25 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-37 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-4 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-48 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-19 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-28 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-40 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-36 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-43 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-10 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:3,ISR:3,LeaderEpoch:2,ZkVersion:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-31 -> (Leader:4,ISR:4,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-6 -> (Leader:5,ISR:5,LeaderEpoch:6,ZkVersion:6,ControllerEpoch:6),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:4,ZkVersion:4,ControllerEpoch:6) (kafka.controller.KafkaController)
[2022-05-04 17:42:32,601] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,602] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,602] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,603] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:32,603] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:42:32,604] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:32,604] INFO [ControllerEventThread controllerId=4] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,605] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:32,605] INFO [ControllerEventThread controllerId=4] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,605] INFO [ControllerEventThread controllerId=4] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,606] DEBUG [Controller id=4] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:32,606] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:42:32,606] DEBUG [Controller id=4] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:42:32,607] INFO [PartitionStateMachine controllerId=4] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:32,608] INFO [ReplicaStateMachine controllerId=4] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:32,609] INFO [Controller id=4] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:42:32,797] INFO [ControllerEventThread controllerId=3] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,798] INFO [ControllerEventThread controllerId=3] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,798] INFO [ControllerEventThread controllerId=3] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,799] DEBUG [Controller id=3] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:32,799] DEBUG [Controller id=3] Unregister BrokerModifications handler for Set(0, 1, 2, 3, 4, 5) (kafka.controller.KafkaController)
[2022-05-04 17:42:32,800] INFO [PartitionStateMachine controllerId=3] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:32,801] INFO [ReplicaStateMachine controllerId=3] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:32,801] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,801] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,801] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,802] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,803] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,803] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,804] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,804] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,804] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,806] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,806] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,806] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,807] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,807] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,807] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,808] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,808] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,808] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)
[2022-05-04 17:42:32,809] INFO [Controller id=3] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:42:32,967] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,967] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,967] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,968] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:32,968] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:42:32,969] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:32,969] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:32,970] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:42:32,983] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,984] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,984] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:32,984] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:32,985] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:42:32,985] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:32,985] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:32,986] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2022-05-04 17:42:33,193] INFO [ControllerEventThread controllerId=5] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:33,194] INFO [ControllerEventThread controllerId=5] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:33,194] INFO [ControllerEventThread controllerId=5] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-04 17:42:33,195] DEBUG [Controller id=5] Resigning (kafka.controller.KafkaController)
[2022-05-04 17:42:33,195] DEBUG [Controller id=5] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-04 17:42:33,196] INFO [PartitionStateMachine controllerId=5] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-04 17:42:33,197] INFO [ReplicaStateMachine controllerId=5] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-04 17:42:33,198] INFO [Controller id=5] Resigned (kafka.controller.KafkaController)
